name: Build Linux AMD64

on:
  workflow_call:
    inputs:
      arch:
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22.4'

      # - name: Set environment variables
      #   run: |
      #     echo "GOARCH=${{ inputs.arch }}" >> $GITHUB_ENV
      #     echo "GOOS=linux" >> $GITHUB_ENV
      #     if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
      #       VERSION=${GITHUB_REF#refs/tags/}
      #       echo "VERSION=${VERSION}" >> $GITHUB_ENV
      #     else
      #       VERSION=${GITHUB_SHA}
      #       echo "VERSION=${VERSION}" >> $GITHUB_ENV
      #     fi

      - name: Set environment variables
        run: |
          echo "GOARCH=${{ inputs.arch }}" >> $GITHUB_ENV
          echo "GOOS=linux" >> $GITHUB_ENV
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="v0.0.0-${GITHUB_SHA::8}"
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          if [ "${{ inputs.arch }}" == "amd64" ]; then
            echo "ARCH_NAME=x86_64" >> $GITHUB_ENV
          elif [ "${{ inputs.arch }}" == "arm64" ]; then
            echo "ARCH_NAME=aarch64" >> $GITHUB_ENV
          else
            echo "ARCH_NAME=${{ inputs.arch }}" >> $GITHUB_ENV
          fi

      - name: Print environment variables
        run: |
          echo "GOARCH=${GOARCH}"
          echo "GOOS=${GOOS}"
          echo "VERSION=${VERSION}"

      - name: Build for Linux AMD64
        run: |
          export GOARCH=${GOARCH}
          export GOOS=${GOOS}
          make build-linux-with-shared-library
          cd ./build
          mkdir -p initia_${VERSION}
          mv libmovevm.so initia_${VERSION}/libmovevm.${GOARCH}.so
          mv libcompiler.so initia_${VERSION}/libcompiler.${GOARCH}.so
          mv initiad initia_${VERSION}/
          tar -czvf initia_${VERSION}_Linux_${ARCH_NAME}.tar.gz initia_${VERSION}

      - name: Google Auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Upload to GCS
        env:
          GCS_BUCKET: ${{ secrets.GCS_BUCKET }}
        run: |
          gsutil cp ./build/initia_${VERSION}_Linux_${ARCH_NAME}.tar.gz gs://${GCS_BUCKET}/initia/

      - name: Verify upload and Generate public URL
        env:
          GCS_BUCKET: ${{ secrets.GCS_BUCKET }}
        run: |
          if gsutil stat gs://${GCS_BUCKET}/initia/initia_${VERSION}_Linux_${ARCH_NAME}.tar.gz; then
            echo "File successfully uploaded"
            echo "Public URL: https://storage.googleapis.com/${GCS_BUCKET}/initia/initia_${VERSION}_Linux_${ARCH_NAME}.tar.gz" >> $GITHUB_STEP_SUMMARY
          else
            echo "File upload failed"
            exit 1
          fi
