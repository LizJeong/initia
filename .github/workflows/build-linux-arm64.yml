name: Build ARM64
on:
  workflow_call:
    inputs:
      arch:
        required: true
        type: string
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22.4'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Install cross-compilation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Set environment variables
        run: |
          echo "GOARCH=arm64" >> $GITHUB_ENV
          echo "GOOS=linux" >> $GITHUB_ENV
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=${GITHUB_SHA}
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Build for ARM64
        run: |
          go mod download
          CGO_ENABLED=1 CC=aarch64-linux-gnu-gcc GOARCH=arm64 GOOS=linux go build -o build/initiad ./cmd/initiad
          mkdir -p build/initia_${VERSION}
          mv build/initiad build/initia_${VERSION}/
          # Note: You might need to adjust the path for libmovevm.so and libcompiler.so
          cp $(go env GOMODCACHE)/github.com/initia-labs/movevm@*/api/libmovevm.so build/initia_${VERSION}/libmovevm.${GOARCH}.so
          cp $(go env GOMODCACHE)/github.com/initia-labs/movevm@*/api/libcompiler.so build/initia_${VERSION}/libcompiler.${GOARCH}.so
          tar -czvf build/initia_${VERSION}_Linux_${GOARCH}.tar.gz -C build initia_${VERSION}

      - name: List files
        run: ls -l build

      - name: Google Auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Upload to GCS
        env:
          GCS_BUCKET: ${{ secrets.GCS_BUCKET }}
        run: |
          if [ -f ./build/initia_${VERSION}_Linux_${GOARCH}.tar.gz ]; then
            gsutil cp ./build/initia_${VERSION}_Linux_${GOARCH}.tar.gz gs://${GCS_BUCKET}/initia/
          else
            echo "Build artifact not found"
            exit 1
          fi
      
      - name: Verify upload and Generate public URL
        env:
          GCS_BUCKET: ${{ secrets.GCS_BUCKET }}
        run: |
          if gsutil stat gs://${GCS_BUCKET}/initia/initia_${VERSION}_Linux_${GOARCH}.tar.gz; then
            echo "File successfully uploaded"
            echo "Public URL: https://storage.googleapis.com/${GCS_BUCKET}/initia/initia_${VERSION}_Linux_${GOARCH}.tar.gz" >> $GITHUB_STEP_SUMMARY
          else
            echo "File upload failed"
            exit 1
          fi
